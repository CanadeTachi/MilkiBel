<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label9.Text" xml:space="preserve">
    <value>После аппаратного цеха молоко, как и другая продукция, поступает по трубопроводам в цех розлива. На заводе производится молоко жирностью 2,5% и 3,2% в пластиковых бутылках объемом 900 мл и 1400 мл.

Прямо на заводе установлен аппарат выдува бутылок из преформ – пластиковых заготовок. Преформа нагревается на аппарате, из нее выдувается бутылка. Собственное производство бутылок позволяет экономить на цене упаковки и избежать загрязнения бутылок при транспортировке.

Бутылку подают на автомат розлива, где в автоматическом режиме происходит загрузка бутылок и пробок, ополаскивание озонированной водой, бесконтактный налив продукта и укупорка винтовой пробкой. Все эти операции выполняются в полностью стерильных условиях – без доступа кислорода, воздуха и света.

Закупоренные бутылки с продукцией подаются на маркиратор, где наносится дата изготовления и партия производства. После чего на этикетировочном аппарате наклеивается этикетка.

Далее бутылки с этикеткой и нанесенной датой отправляются в агрегатор, где формируется групповая упаковка – бутылки по 6 или 8 штук помещаются в термоусадочную пленку. Так продукты будет легче транспортировать. 

В групповой упаковке продукты выставляют на поддоны и отправляют на склад.</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>В аппаратном цехе из нормализованных по жиру и белку смесей, готовят конечные продукты — питьевое молоко, сметану, кефир, ряженку, снежок.

Молоко нужной жирности и температуры помещается в отдельный резервуар и вводится закваска чистых культур молочнокислых бактерий. У каждого продукта своя закваска, что придает ему определенный вкус и необходимую консистенцию.

Процесс сквашивания у продуктов отличается по времени. Для ряженки, например, он длится 4-5 часов, а для кефира – около 8 часов. При сквашивании важно выдержать время и температуру, чтобы получать стабильное качество продукта на выходе.

Готовый продукт проверяют в лаборатории, после чего охлаждают и направляют по трубопроводам на линии розлива ПЭТ, линию розлива сметаны, в творожный цех и маслоцех.
</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>После приемки молоко поступает в цех пастеризации и нормализации для дальнейшей переработки.

Здесь происходит очистка, нормализация, гомогенизация, пастеризация и охлаждение молока на пастеризационно-охладительных установках.

Очистка и нормализация молока проводится на сепараторах-молокоочистителях и сепараторах-сливкоотделителях.

Смешивая сливки и обезжиренное молоко в нужных пропорциях обеспечивается необходимая жирность молочной смеси. А нормализованная до нужной жирности смесь поступает в гомогенизатор, где происходит раздробление жировых шариков. Гомогенизация делает молочную смесь однородной.

При производстве молока и молочных продуктов мы используем пастеризацию при щадящих температурах (ниже точки кипения).

Нормализованные и пастеризованные смеси охлаждаются и ждут своей очереди до поступления в аппаратный цех.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Каждый день на завод «Молочной Азбуки» привозят до 60 тонн сырого молока. Молоко доставляют молоковозами из крупных хозяйств Новосибирской области.

Входной контроль качества на заводе очень строгий. Перед тем, как заехать в цех, молоковозы обрабатываются специальными растворами, чтобы предотвратить попадание бактерий извне.

После чего из каждой пришедшей на завод машины отбирают пробы молока. Пробу направляют в лабораторию и проводят химический анализ по нескольким показателям: наличие грязи и посторонних предметов, плотность, кислотность, жирность, белок, наличие антибиотиков и т.д. По этим показателям устанавливают качество сырья.

Если молоко не соответствует требованиям по качеству - его отправляют обратно в фермерское хозяйство.

Только в случае полного соответствия всем нормам, молоко принимают на завод - молоковоз моется, пропаривается, к нему присоединяются трубопроводы. И, с помощью скачивающих станций молоко направляют в резервуары для хранения.</value>
  </data>
</root>